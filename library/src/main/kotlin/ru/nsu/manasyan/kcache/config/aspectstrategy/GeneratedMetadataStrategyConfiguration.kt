package ru.nsu.manasyan.kcache.config.aspectstrategy

import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.ScopedProxyMode
import org.springframework.web.context.annotation.RequestScope
import ru.nsu.manasyan.kcache.aspect.strategy.GeneratedMetadataStrategy
import ru.nsu.manasyan.kcache.aspect.strategy.KCacheableAspectStrategy
import ru.nsu.manasyan.kcache.core.handler.RequestHandlerMetadataContainer
import ru.nsu.manasyan.kcache.core.state.provider.NewStateProvider
import ru.nsu.manasyan.kcache.properties.KCacheProperties
import ru.nsu.manasyan.kcache.util.LoggerProperty

@Configuration
@ConditionalOnProperty(
    prefix = KCacheProperties.propertiesPrefix,
    name = ["aspect.strategy"],
    havingValue = "generated-metadata"
)
class GeneratedMetadataStrategyConfiguration {
    private val logger by LoggerProperty()

    /**
     * Creates [RequestHandlerMetadataContainer] bean.
     * Instance was obtained by deserialization from file, generated by KCacheable annotation processor.
     */
    // TODO: change docs
    @Bean
    fun requestHandlerMetadataContainer(): RequestHandlerMetadataContainer {
        return Class.forName(RequestHandlerMetadataContainer.GENERATED_METADATA_CLASS_NAME)
            .getDeclaredConstructor()
            .newInstance() as RequestHandlerMetadataContainer
    }

    @RequestScope(proxyMode = ScopedProxyMode.INTERFACES)
    @Bean
    fun kCacheAspectStrategy(
        container: RequestHandlerMetadataContainer
    ): KCacheableAspectStrategy {
        logger.debug("Building GeneratedMetadataStrategy")
        return GeneratedMetadataStrategy(container)
    }

    /**
     * Creates [InjectRequestStatesMappingsBeanPostProcessor] bean
     */
    @Bean
    fun injectStatesBeanPostProcessor(
        requestHandlerMetadataContainer: RequestHandlerMetadataContainer,
        newStateProvider: NewStateProvider
    ): InjectRequestStatesMappingsBeanPostProcessor {
        logger.debug("Building InjectRequestStatesMappingsBeanPostProcessor")
        return InjectRequestStatesMappingsBeanPostProcessor(
            requestHandlerMetadataContainer,
            newStateProvider
        )
    }
}